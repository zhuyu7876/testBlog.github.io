[{"title":"【笔记】G-Lab 计算机视觉实验室","date":"2019-12-22T08:12:05.000Z","path":"2019/12/22/G-LAb-计算机视觉实验室/","text":"【笔记】G-Lab 计算机视觉实验室​ 收藏于微信公众号推送文章，当时感觉不错，果断收藏，日后研究。 ​ 链接：http://www.gwylab.com/* ​ 首页截图： ​ avatar ​ 个人比较感兴趣 “人脸生成” 传送门： 生成日志目录 代数 标签 生成器 生成样本 第1代 高颜值 官方（Github） / 第2代 更高颜值 官方+颜值分类器 / 第3代 “萌娃”特辑 萌娃脸生成器（Github） 1万张（提取码：75AG） 第4代 “最美笑容”特辑 官方+笑容分类器 5万张（提取码：AHU3） 第5代 “中国姑娘”特辑 黄种人脸生成器（Github） 5万张（提取码：A01B） 第6代 “类现实名人”特辑 现实人脸编码器 20张 第7代 “中国明星”特辑 明星脸生成器（Github） 1万张（提取码：XVAL） 第8代 “中国网红”特辑 网红脸生成器（Github） 1万张（提取码：3IQT） 第9代 “超模”特辑 超模脸生成器（Github） 1万张（提取码：2A5W） 附 人脸属性编辑器（Github） //适用于所有上述生成器 新 基于StyleGAN2重制 含上述所有生成器（Github） //消除伪影和损坏现象 转自：http://seeprettyface.com/index.html","tags":[{"name":"计算机视觉","slug":"计算机视觉","permalink":"https://zhuyu7876.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"},{"name":"AI","slug":"AI","permalink":"https://zhuyu7876.github.io/tags/AI/"},{"name":"实用工具","slug":"实用工具","permalink":"https://zhuyu7876.github.io/tags/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"},{"name":"收藏","slug":"收藏","permalink":"https://zhuyu7876.github.io/tags/%E6%94%B6%E8%97%8F/"}]},{"title":"考研必上岸","date":"2019-12-20T13:11:08.000Z","path":"2019/12/20/考研必上岸/","text":"考研必定上岸！！！冲鸭！！！","tags":[{"name":"考研","slug":"考研","permalink":"https://zhuyu7876.github.io/tags/%E8%80%83%E7%A0%94/"},{"name":"必上岸","slug":"必上岸","permalink":"https://zhuyu7876.github.io/tags/%E5%BF%85%E4%B8%8A%E5%B2%B8/"},{"name":"在线施法","slug":"在线施法","permalink":"https://zhuyu7876.github.io/tags/%E5%9C%A8%E7%BA%BF%E6%96%BD%E6%B3%95/"}]},{"title":"Oracle DataBase DML","date":"2019-12-19T02:04:12.000Z","path":"2019/12/19/Oracle-DataBase-DML/","text":"第四章 插入更新和删除表数据1. INSERT语句（DML数据操纵语言）1.1 insert语句格式1insert into 表名 (列1,列2,....) values (表达式1,表达式2....) 如果要给表中每一列都插入值，则不需要给出列名，但是必须为表中每个列指定值，并且这些值的顺序必须与create table语句创建表时的顺序一致。对于不知道值的列可设置为空。案例如下: 12 在使用列名插入值的时候，不需要按照列的顺序罗列，但是值的罗列顺序必须与列的顺序相同。 1.2 处理完整性约束在添加包含引用另外一个表的主键的外键值的行以前，被引用表的值必须已经就位。 首先填充主表，然后再填充从表。或者现将外键列设置为null 1.3 插入日期和时间在插入数值型数据时，不要使用单引号括住它。但字符和日期数据类型却要用单引号。 录入日期的默认格式为DD-MON-YY 和DD-MON-YYYY。示例如下: 12 双位年份如果小于50，则假定是21世纪年份，如果大于50则假定是20世纪年份。 如果想要用其他日期格式字符串插入数据，则需要使用日期转换函数TO_DATE。TO_DATE函数的一般形式如下: 1TO_DATE('日期字符串','格式化字符') 日期格式化字符如下表所示，必须严格按照下表的大小写。日期模式元素之间可以使用/、_和: 。 格式模式符号 示例值 MONTH FEBRUARY Month February MM 02 DD 15 DDD 251 DAY WEDNESDAY Day Wednesday DY WED YYYY 2006 YY 06 HH 08小时 MI 分钟 SS 秒 AM PM 1.4 序列sequence序列是一种数据库对象，它生成一系列不同的整数。这些整数通常用作添加到表中的每个新数据的唯一主键。序列生成的整数不会重复，最大值是10的27次方。 创建序列的语句如下: 12345678CREATE SEQUENCE seq_name[START WITH 起始值][INCREMENT by value][&#123;MAXVALUE value | NOMAXVALUE&#125;][&#123;MINVALUE value | NOMINVALUE&#125;][&#123;CYCLE|NOCYCLE&#125;][&#123;ORDER | NOORDER&#125;][&#123;CACHE value | NOCACHE&#125;] 用序列值作为主键，可以使用序列的两个伪列:NEXTVAL和CURRVAL 2. UPDATA语句更新数据单条UPDATA语句每次只能更新一张表，但是可以更新多个列，其一般形式如下: 123UPDATE 表名 SET 列1=表达式1, 列2=表达式2,... [WHERE 条件] 条件表达式的关系运算符有 =等于、&lt;&gt;或!=,&gt;、&lt;、&lt;=、&gt;=。 逻辑操作符有 操作符 说明 样例 AND WHERE year=2019 and year=’2018’ OR where year=2019 or year=2018 NOT 否定 where not year = 2019 IN 值是否在列出的离散集合中 where year in (2019,2018,2017) BETWEEN….AND…. 值在范围之间，包括边界值 where year between 2010 and 2019 2.2 使用case结构case的一般语法为: 123456CASE WHEN 条件1 THEN result1 WHEN 条件2 THEN result2 ... [ELSE 默认值]END 3. DELETE删除3.1 一般格式1DELETE [FROM] 表名 [WHERE 条件] 4. 事务Transaction数据库事务是一组语句，它们共同组成一个逻辑单元，是一组不可分开的SQL语句，这些SQL语句在执行时要么一起成功要么一起失败。 事务不用明确的指定开始时间，只要一连上oracle事务就会自动开始，并在提交当前事务时结束。在一个事务结束时，另一个事务就自动开始。 4.1 提交commit当事务执行成功要执行commit语句，将事务的执行结果固定下来。 4.2 回滚rollback当事务执行失败时，要执行rollback语句，将数据恢复到之前的某个时间点。 事务的回滚不能跨事务 当rollback后没有指明时间点，则数据回滚到上一条事务结束之后。 1rollback; 指定时间点 1rollback to pointname; 当rollback后又指明savepoint,则数据回滚到savepoint所指示的时间点。 4.3保留点 SAVEPOINT设置要回滚的时间点。 1savepoint pointname; 5. 触发器(Triggers)表触发器: 与数据库表相关联的触发器。通常用来监控表的状态，一般是在执行了Delete、Update或者Insert语句后，表中的数据发生了改变时需要触发执行一段PL/SQL代码。 触发器语句格式 123456789CREATE TRIGGER tg_name(BEFORE | AFTER | INSTEAD OF) &lt;trigger-event&gt; on table_name[FOR EACH ROW [WHEN &lt;条件&gt;]][DECLARE 声明变量]BEGIN pl/sql代码END; 触发器是跟踪表中数据的变化，从而执行指定的sql代码，所以它需要记录下来表中数据变化之前的值，和变化之后的值。这些值保存在:OLD 和:NEW两个变量中。 ​ 触发器相关名OLD和NEW提供的值 Insert 语句 ​ NEW代表 导致触发器触发的inster语句中所有为列提供的值 ​ OLD代表null UPDATE语句NEW 代表导致触发器触发的update语句中为列提供的值 OLD代表导致触发器触发的update语句执行前最后一次提交的列值 DELETE语句 NEW 是NULL OLD代表导致触发器触发的DELETE语句执行前最后一次提交的列值 before触发器在语句执行之前触发 12345create trigger tg_stuidBefore INSERT ON student FOR EACH ROWBEGIN select sq_stuid.nextval into :NEW.stuid from dual;END; 上面的触发器是before触发器 ，它会在student表insert新记录之前，执行sq_stuid序列获得新的序列值，并替换掉插入的新数据中的stuid这一列的值。这样我们在用insert语句往student表插入新数据时不必指明stuid了，触发器会帮我们自动插入新的序列值作为id. after触发器在语句执行之后触发. 使用After触发器完成将删除的数据自动备份到另一张备份表中。 123456create trigger tg_stu_bakAfter delete on student for each rowbegin -- 获取要删除的记录，并将其插入到备份表中 insert into student_bak values(:OLD.stuid,:OLD.name,:OLD.sex);end; 完成审计功能: 当有人修改了student表时，我希望记录下谁在什么时候做了什么修改。 需要创建审计日志表，审计日志表包含所做的操作类型，执行时间，所涉及的数据 12345678910create table STUDENT_log--审计日志表( event nvarchar2(20), --操作类型 beforeafter nvarchar2(20), --记录的新旧 log_user nvarchar2(20),--记录执行操作的用户 log_time date,--操作时间 stuid NUMBER, name NVARCHAR2(20), sex CHAR(2)) 创建after触发器 1234567891011create trigger tg_stu_logafter update on student for each rowbegin --记录下更新之前的数据 insert into student_log values ('update','before',user,sysdate,:OLD.stuid,:OLD.name,:OLD.sex); --记录下更新之后的数据 insert into student_log values ('update','after',user,sysdate,:NEW.stuid,:NEW.name,:NEW.sex); end; 作业： 创建一个用户信息表userinfo，有如下几列 userid username用户名 pwd密码 email邮箱 mobile手机号码 创建一个序列sq_userid用作userid的序列号生成器 创建before触发器tg_userid,用来自动插入userid的序列号 用insert 语句插入5条测试记录,insert语句不需要指明userid的值， 由第3部创建的tg_userid触发器自动生成。 创建一个userinfo_bak备份表，表结构和userinfo完全一样 创建一个after触发器，能够自动将userinfo表中删除的记录备份到 userinfo_bak表中 创建一个userinfo_log日志表，其表结构 event 操作名 beforeafter时间标志, log_user操作的用户名, log_time操作时间,其它列与userinfo表一致 ​ 这张表用于存储对userinfo所做操作的日志记录。 创建一个after触发器，当用update语句修改userinfo表中记录时， 能够在userinfo_log日志表中插入2条日志记录，第一条日志记录内容为 执行操作的类型以及执行操作的用户名和时间还有记录修改之前的值。 第二条日志记录内容为记录修改之后的值。","tags":[{"name":"Oracle","slug":"Oracle","permalink":"https://zhuyu7876.github.io/tags/Oracle/"},{"name":"数据库","slug":"数据库","permalink":"https://zhuyu7876.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"阿里云RDS数据库热备份的恢复","date":"2019-12-19T02:03:45.000Z","path":"2019/12/19/阿里云RDS数据库热备份的恢复/","text":"阿里云RDS数据库热备份的恢复一.xtrabackup数据库热备份软件介绍阿里云的RDS数据库热备份是采用的xtrabackup备份软件完成的备份。 xtrabackup是开源的mysql热备份软件。其最新版本是8.0版。 一般来说xtrabackup最常用的是2.3和2.4两个版本。做热备份时，xtrabackup2.3针对的是mysql5.6版，xtrabackup2.4针对的是mysql5.7版。 注意:xtrabackup只能在linux环境下运行。 当我们要恢复数据库时，一定要搞清楚恢复的数据库版本，并安装对应的xtrabackup版本。 二 恢复步骤1. 安装centos7虚拟机2. 安装mysql也可以先安装宝塔面板，再用宝塔面板安装mysql 在centos7下用如下命令安装宝塔面板 1yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh 3. 解压备份文件12# mkdir data# tar -zxvf hins6415789_data_20190927031508.tar.gz -C data 解压完成后，可以看到整个文件夹其实就是mysql下的data数据文件夹，但是这个文件不能直接放到mysql目录下使用，必须要用xtrabackup恢复才行。 可以看到其中有一个名为xtrabackup_info的文件，内容如下 12345678910111213141516171819uuid &#x3D; 844f122a-e092-11e9-aedc-7cd30ac4e8f2name &#x3D; tool_name &#x3D; innobackupextool_command &#x3D; --defaults-file&#x3D;&#x2F;etc&#x2F;my3026.cnf --password&#x3D;... --user&#x3D;root --host&#x3D;127.0.0.1 --port&#x3D;3026 --tmpdir&#x3D;&#x2F;home&#x2F;mysql&#x2F;backup&#x2F;3026 --rocksdb_checkpoint_path&#x3D;&#x2F;mysqldata&#x2F;backup_tmp&#x2F;4077803_2330912 --rds-xb-fd-limits&#x3D;400000 --slave-info --stream&#x3D;tar &#x2F;home&#x2F;mysql&#x2F;backup&#x2F;3026tool_version &#x3D; 2.3.10ibbackup_version &#x3D; 2.3.10server_version &#x3D; 5.6.16-logstart_time &#x3D; 2019-09-27 03:15:53end_time &#x3D; 2019-09-27 03:19:10lock_time &#x3D; 4binlog_pos &#x3D; filename &#39;mysql-bin.001094&#39;, position 28375, GTID of the last change &#39;6df9fe78-53f1-11e7-bb91-7cd30ac4e6a6:1-17525642&#39;innodb_from_lsn &#x3D; 0innodb_to_lsn &#x3D; 25986875480partial &#x3D; Nincremental &#x3D; Nformat &#x3D; tarcompact &#x3D; Ncompressed &#x3D; Nencrypted &#x3D; N tar 命令详解tar在Linux上是常用的打包、压缩、加压缩工具，他的参数很多，折里仅仅列举常用的压缩与解压缩参数 参数：-c ：create 建立压缩档案的参数；-x ： 解压缩压缩档案的参数；-z ： 是否需要用gzip压缩；-v： 压缩的过程中显示档案；-f： 置顶文档名，在f后面立即接文件名，不能再加参数 举例： 一，将整个/home/www/images 目录下的文件全部打包为 /home/www/images.tar 12tar -cvf &#x2F;home&#x2F;www&#x2F;images.tar &#x2F;home&#x2F;www&#x2F;images ← 仅打包，不压缩tar -zcvf &#x2F;home&#x2F;www&#x2F;images.tar.gz &#x2F;home&#x2F;www&#x2F;images ← 打包后，以gzip压缩 在参数f后面的压缩文件名是自己取的，习惯上用tar来做，如果加z参数，则以tar.gz 或tgz来代表gzip压缩过的tar file文件 1 将tgz文件解压到指定目录tar zxvf test.tgz -C 指定目录比如将/source/kernel.tgz解压到 /source/linux-2.6.29 目录 1tar zxvf &#x2F;source&#x2F;kernel.tgz -C &#x2F;source&#x2F; linux-2.6.29 2 将指定目录压缩到指定文件比如将linux-2.6.29 目录压缩到 kernel.tgz 1tar czvf kernel.tgz linux-2.6.29 4.安装xtrabackup这里我们安装的是xtrabackup2.3版本 12345yum install http:&#x2F;&#x2F;www.percona.com&#x2F;downloads&#x2F;percona-release&#x2F;redhat&#x2F;0.1-4&#x2F;percona-release-0.1-4.noarch.rpyum list | grep perconayum install percona-xtrabac 5.恢复数据库12345# service mysqld stop &#x2F;&#x2F;先停掉mysql服务# mv &#x2F;www&#x2F;server&#x2F;data &#x2F;www&#x2F;server&#x2F;databack &#x2F;&#x2F;将mysql数据库原有的data目录改名字做备份&#x2F;&#x2F;恢复数据库# xtrabackup --copy-back --target-dir&#x3D;&#x2F;home&#x2F;data# chown -R mysql:mysql data &#x2F;&#x2F;给data目录赋权 三 修改mysql5.6的root密码1.绕过密码启动123vim /etc/my.cnf //打开mysql的配置文件//在其中[mysqld]节点下加入下面一句话 skip-grant-tables=1 vim使用时在锁定状态下 输入i 进入编辑状态 在编辑状态按esc键进入命令状态 在命令状态输入 :q 是不保存修改就推出 输入:wq! 是保存修改并退出。 修改完毕后重启mysql服务 12service mysqld startmysql -u root -p //进入mysql命令行 2. 修改root密码在mysql命令行下输入如下语句 123mysql&gt; use mysql; ##使用mysql数据库mysql&gt; update user set password&#x3D;password(&quot;123456&quot;) where user&#x3D;&quot;root&quot;;##更新密码mysql&gt; flush privileges;##刷新权限 然后将my.cnf文件中添加的那句 skip-grant-tables=1注释掉。 1service mysqld restart &#x2F;&#x2F;重启mysql服务 3.添加root的远程访问权限12GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39; flush privileges; &#x2F;&#x2F;刷新权限","tags":[{"name":"数据库","slug":"数据库","permalink":"https://zhuyu7876.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"阿里云","slug":"阿里云","permalink":"https://zhuyu7876.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"}]},{"title":"Hello World","date":"2019-12-19T01:17:28.109Z","path":"2019/12/19/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"test","slug":"test","permalink":"https://zhuyu7876.github.io/tags/test/"}]}]