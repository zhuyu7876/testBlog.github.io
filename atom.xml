<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZhuYu&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/2b039f60dfa69e7f0a0c632c4007713c</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhuyu7876.github.io/"/>
  <updated>2019-12-20T13:26:01.174Z</updated>
  <id>https://zhuyu7876.github.io/</id>
  
  <author>
    <name>ZhuYu</name>
    <email>787626629@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>考研必上岸</title>
    <link href="https://zhuyu7876.github.io/2019/12/20/%E8%80%83%E7%A0%94%E5%BF%85%E4%B8%8A%E5%B2%B8/"/>
    <id>https://zhuyu7876.github.io/2019/12/20/%E8%80%83%E7%A0%94%E5%BF%85%E4%B8%8A%E5%B2%B8/</id>
    <published>2019-12-20T13:11:08.000Z</published>
    <updated>2019-12-20T13:26:01.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="考研必定上岸！！！"><a href="#考研必定上岸！！！" class="headerlink" title="考研必定上岸！！！"></a>考研必定上岸！！！</h1><h1 id="冲鸭！！！"><a href="#冲鸭！！！" class="headerlink" title="冲鸭！！！"></a>冲鸭！！！</h1><p><img src="https://ftp.bmp.ovh/imgs/2019/12/7e74b608194a48aa.jpg" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;考研必定上岸！！！&quot;&gt;&lt;a href=&quot;#考研必定上岸！！！&quot; class=&quot;headerlink&quot; title=&quot;考研必定上岸！！！&quot;&gt;&lt;/a&gt;考研必定上岸！！！&lt;/h1&gt;&lt;h1 id=&quot;冲鸭！！！&quot;&gt;&lt;a href=&quot;#冲鸭！！！&quot; class=&quot;header
      
    
    </summary>
    
    
    
      <category term="考研" scheme="https://zhuyu7876.github.io/tags/%E8%80%83%E7%A0%94/"/>
    
      <category term="必上岸" scheme="https://zhuyu7876.github.io/tags/%E5%BF%85%E4%B8%8A%E5%B2%B8/"/>
    
      <category term="在线施法" scheme="https://zhuyu7876.github.io/tags/%E5%9C%A8%E7%BA%BF%E6%96%BD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Oracle DataBase DML</title>
    <link href="https://zhuyu7876.github.io/2019/12/19/Oracle-DataBase-DML/"/>
    <id>https://zhuyu7876.github.io/2019/12/19/Oracle-DataBase-DML/</id>
    <published>2019-12-19T02:04:12.000Z</published>
    <updated>2019-12-19T02:05:17.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第四章-插入更新和删除表数据"><a href="#第四章-插入更新和删除表数据" class="headerlink" title="第四章 插入更新和删除表数据"></a>第四章 插入更新和删除表数据</h1><h2 id="1-INSERT语句（DML数据操纵语言）"><a href="#1-INSERT语句（DML数据操纵语言）" class="headerlink" title="1. INSERT语句（DML数据操纵语言）"></a>1. INSERT语句（DML数据操纵语言）</h2><h3 id="1-1-insert语句格式"><a href="#1-1-insert语句格式" class="headerlink" title="1.1  insert语句格式"></a>1.1  insert语句格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 (列<span class="number">1</span>,列<span class="number">2</span>,....) <span class="keyword">values</span> (表达式<span class="number">1</span>,表达式<span class="number">2.</span>...)</span><br></pre></td></tr></table></figure><p>如果要给表中每一列都插入值，则不需要给出列名，但是必须为表中每个列指定值，并且这些值的顺序必须与create table语句创建表时的顺序一致。对于不知道值的列可设置为空。案例如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在使用列名插入值的时候，不需要按照列的顺序罗列，但是值的罗列顺序必须与列的顺序相同。</p><h3 id="1-2-处理完整性约束"><a href="#1-2-处理完整性约束" class="headerlink" title="1.2 处理完整性约束"></a>1.2 处理完整性约束</h3><p>在添加包含引用另外一个表的主键的外键值的行以前，被引用表的值必须已经就位。</p><p>首先填充主表，然后再填充从表。或者现将外键列设置为null</p><h3 id="1-3-插入日期和时间"><a href="#1-3-插入日期和时间" class="headerlink" title="1.3 插入日期和时间"></a>1.3 插入日期和时间</h3><p>在插入数值型数据时，不要使用单引号括住它。但字符和日期数据类型却要用单引号。</p><p>录入日期的默认格式为DD-MON-YY 和DD-MON-YYYY。示例如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>双位年份如果小于50，则假定是21世纪年份，如果大于50则假定是20世纪年份。</p><p>如果想要用其他日期格式字符串插入数据，则需要使用日期转换函数TO_DATE。TO_DATE函数的一般形式如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TO_DATE('日期字符串','格式化字符')</span><br></pre></td></tr></table></figure><p>日期格式化字符如下表所示，必须严格按照下表的大小写。日期模式元素之间可以使用/、_和:  。</p><table><thead><tr><th align="center">格式模式符号</th><th align="center">示例值</th></tr></thead><tbody><tr><td align="center">MONTH</td><td align="center">FEBRUARY</td></tr><tr><td align="center">Month</td><td align="center">February</td></tr><tr><td align="center">MM</td><td align="center">02</td></tr><tr><td align="center">DD</td><td align="center">15</td></tr><tr><td align="center">DDD</td><td align="center">251</td></tr><tr><td align="center">DAY</td><td align="center">WEDNESDAY</td></tr><tr><td align="center">Day</td><td align="center">Wednesday</td></tr><tr><td align="center">DY</td><td align="center">WED</td></tr><tr><td align="center">YYYY</td><td align="center">2006</td></tr><tr><td align="center">YY</td><td align="center">06</td></tr><tr><td align="center">HH</td><td align="center">08小时</td></tr><tr><td align="center">MI</td><td align="center">分钟</td></tr><tr><td align="center">SS</td><td align="center">秒</td></tr><tr><td align="center">AM</td><td align="center"></td></tr><tr><td align="center">PM</td><td align="center"></td></tr></tbody></table><h3 id="1-4-序列sequence"><a href="#1-4-序列sequence" class="headerlink" title="1.4 序列sequence"></a>1.4 序列sequence</h3><p>序列是一种数据库对象，它生成一系列不同的整数。这些整数通常用作添加到表中的每个新数据的唯一主键。序列生成的整数不会重复，最大值是10的27次方。</p><p>创建序列的语句如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SEQUENCE</span>  seq_name</span><br><span class="line">[<span class="keyword">START</span> <span class="keyword">WITH</span> 起始值]</span><br><span class="line">[<span class="keyword">INCREMENT</span> <span class="keyword">by</span> <span class="keyword">value</span>]</span><br><span class="line">[&#123;MAXVALUE  <span class="keyword">value</span> | <span class="keyword">NOMAXVALUE</span>&#125;]</span><br><span class="line">[&#123;<span class="keyword">MINVALUE</span> <span class="keyword">value</span> | <span class="keyword">NOMINVALUE</span>&#125;]</span><br><span class="line">[&#123;<span class="keyword">CYCLE</span>|<span class="keyword">NOCYCLE</span>&#125;]</span><br><span class="line">[&#123;<span class="keyword">ORDER</span> | <span class="keyword">NOORDER</span>&#125;]</span><br><span class="line">[&#123;<span class="keyword">CACHE</span> <span class="keyword">value</span> | NOCACHE&#125;]</span><br></pre></td></tr></table></figure><p>用序列值作为主键，可以使用序列的两个伪列:NEXTVAL和CURRVAL</p><h2 id="2-UPDATA语句更新数据"><a href="#2-UPDATA语句更新数据" class="headerlink" title="2. UPDATA语句更新数据"></a>2. UPDATA语句更新数据</h2><p>单条UPDATA语句每次只能更新一张表，但是可以更新多个列，其一般形式如下:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名</span><br><span class="line"> <span class="keyword">SET</span> 列<span class="number">1</span>=表达式<span class="number">1</span>, 列<span class="number">2</span>=表达式<span class="number">2</span>,...</span><br><span class="line">   [<span class="keyword">WHERE</span> 条件]</span><br></pre></td></tr></table></figure><p>条件表达式的关系运算符有 =等于、&lt;&gt;或!=,&gt;、&lt;、&lt;=、&gt;=。</p><p>逻辑操作符有</p><table><thead><tr><th align="center">操作符</th><th>说明</th><th>样例</th></tr></thead><tbody><tr><td align="center">AND</td><td></td><td>WHERE year=2019 and year=’2018’</td></tr><tr><td align="center">OR</td><td></td><td>where year=2019 or year=2018</td></tr><tr><td align="center">NOT</td><td>否定</td><td>where not year = 2019</td></tr><tr><td align="center">IN</td><td>值是否在列出的离散集合中</td><td>where year in (2019,2018,2017)</td></tr><tr><td align="center">BETWEEN….AND….</td><td>值在范围之间，包括边界值</td><td>where year between 2010 and 2019</td></tr></tbody></table><h3 id="2-2-使用case结构"><a href="#2-2-使用case结构" class="headerlink" title="2.2 使用case结构"></a>2.2 使用case结构</h3><p>case的一般语法为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE</span><br><span class="line">   WHEN 条件1  THEN result1</span><br><span class="line">   WHEN 条件2  THEN result2</span><br><span class="line">   ...</span><br><span class="line">   [ELSE 默认值]</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h2 id="3-DELETE删除"><a href="#3-DELETE删除" class="headerlink" title="3. DELETE删除"></a>3. DELETE删除</h2><h3 id="3-1-一般格式"><a href="#3-1-一般格式" class="headerlink" title="3.1 一般格式"></a>3.1 一般格式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> [<span class="keyword">FROM</span>] 表名 [<span class="keyword">WHERE</span> 条件]</span><br></pre></td></tr></table></figure><h2 id="4-事务Transaction"><a href="#4-事务Transaction" class="headerlink" title="4. 事务Transaction"></a>4. 事务Transaction</h2><p>数据库事务是一组语句，它们共同组成一个逻辑单元，是一组不可分开的SQL语句，这些SQL语句在执行时要么一起成功要么一起失败。</p><p>事务不用明确的指定开始时间，只要一连上oracle事务就会自动开始，并在提交当前事务时结束。在一个事务结束时，另一个事务就自动开始。</p><h3 id="4-1-提交commit"><a href="#4-1-提交commit" class="headerlink" title="4.1 提交commit"></a>4.1 提交commit</h3><p>当事务执行成功要执行commit语句，将事务的执行结果固定下来。</p><h3 id="4-2-回滚rollback"><a href="#4-2-回滚rollback" class="headerlink" title="4.2 回滚rollback"></a>4.2 回滚rollback</h3><p>当事务执行失败时，要执行rollback语句，将数据恢复到之前的某个时间点。</p><ol><li><p>事务的回滚不能跨事务</p></li><li><p>当rollback后没有指明时间点，则数据回滚到上一条事务结束之后。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback;</span><br></pre></td></tr></table></figure><p>指定时间点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollback to pointname;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li>当rollback后又指明savepoint,则数据回滚到savepoint所指示的时间点。</li></ol><h3 id="4-3保留点-SAVEPOINT"><a href="#4-3保留点-SAVEPOINT" class="headerlink" title="4.3保留点 SAVEPOINT"></a>4.3保留点 SAVEPOINT</h3><p>设置要回滚的时间点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">savepoint  pointname;</span><br></pre></td></tr></table></figure><h2 id="5-触发器-Triggers"><a href="#5-触发器-Triggers" class="headerlink" title="5. 触发器(Triggers)"></a>5. 触发器(Triggers)</h2><p>表触发器: 与数据库表相关联的触发器。通常用来监控表的状态，一般是在执行了Delete、Update或者Insert语句后，表中的数据发生了改变时需要触发执行一段PL/SQL代码。</p><p>触发器语句格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> tg_name</span><br><span class="line">(<span class="keyword">BEFORE</span> | <span class="keyword">AFTER</span> | INSTEAD <span class="keyword">OF</span>) &lt;<span class="keyword">trigger</span>-<span class="keyword">event</span>&gt; <span class="keyword">on</span> table_name</span><br><span class="line">[<span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span> [<span class="keyword">WHEN</span> &lt;条件&gt;]]</span><br><span class="line">[<span class="keyword">DECLARE</span></span><br><span class="line">   声明变量</span><br><span class="line">]</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  pl/<span class="keyword">sql</span>代码</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>触发器是跟踪表中数据的变化，从而执行指定的sql代码，所以它需要记录下来表中数据变化之前的值，和变化之后的值。这些值保存在:OLD 和:NEW两个变量中。</p><p>​     触发器相关名OLD和NEW提供的值</p><ol><li>Insert 语句</li></ol><p>​       NEW代表  导致触发器触发的inster语句中所有为列提供的值</p><p>​       OLD代表null</p><ol start="2"><li><p>UPDATE语句<br>NEW 代表导致触发器触发的update语句中为列提供的值</p><p>OLD代表导致触发器触发的update语句执行前最后一次提交的列值</p></li><li><p>DELETE语句</p><p>NEW 是NULL</p><p>OLD代表导致触发器触发的DELETE语句执行前最后一次提交的列值</p></li></ol><h3 id="before触发器"><a href="#before触发器" class="headerlink" title="before触发器"></a>before触发器</h3><p>在语句执行之前触发</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tg_stuid</span><br><span class="line"><span class="keyword">Before</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> student <span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">select</span> sq_stuid.nextval <span class="keyword">into</span> :NEW.stuid <span class="keyword">from</span> dual;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>上面的触发器是before触发器  ，它会在student表insert新记录之前，执行sq_stuid序列获得新的序列值，并替换掉插入的新数据中的stuid这一列的值。这样我们在用insert语句往student表插入新数据时不必指明stuid了，触发器会帮我们自动插入新的序列值作为id.</p><h3 id="after触发器"><a href="#after触发器" class="headerlink" title="after触发器"></a>after触发器</h3><p>在语句执行之后触发.</p><p>使用After触发器完成将删除的数据自动备份到另一张备份表中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tg_stu_bak</span><br><span class="line"><span class="keyword">After</span> <span class="keyword">delete</span> <span class="keyword">on</span> student <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">-- 获取要删除的记录，并将其插入到备份表中</span></span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> student_bak <span class="keyword">values</span>(:OLD.stuid,:OLD.name,:OLD.sex);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>完成审计功能:</p><p>当有人修改了student表时，我希望记录下谁在什么时候做了什么修改。</p><p>需要创建审计日志表，审计日志表包含所做的操作类型，执行时间，所涉及的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> STUDENT_log<span class="comment">--审计日志表</span></span><br><span class="line">(</span><br><span class="line">  <span class="keyword">event</span> <span class="keyword">nvarchar2</span>(<span class="number">20</span>),   <span class="comment">--操作类型</span></span><br><span class="line">  beforeafter  <span class="keyword">nvarchar2</span>(<span class="number">20</span>), <span class="comment">--记录的新旧</span></span><br><span class="line">  log_user     <span class="keyword">nvarchar2</span>(<span class="number">20</span>),<span class="comment">--记录执行操作的用户</span></span><br><span class="line">  log_time     <span class="built_in">date</span>,<span class="comment">--操作时间</span></span><br><span class="line">  stuid <span class="built_in">NUMBER</span>,</span><br><span class="line">  <span class="keyword">name</span>  <span class="keyword">NVARCHAR2</span>(<span class="number">20</span>),</span><br><span class="line">  sex   <span class="built_in">CHAR</span>(<span class="number">2</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>创建after触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> tg_stu_log</span><br><span class="line"><span class="keyword">after</span> <span class="keyword">update</span> <span class="keyword">on</span> student <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">--记录下更新之前的数据</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> student_log <span class="keyword">values</span></span><br><span class="line">  (<span class="string">'update'</span>,<span class="string">'before'</span>,<span class="keyword">user</span>,<span class="keyword">sysdate</span>,:OLD.stuid,:OLD.name,:OLD.sex);</span><br><span class="line">  <span class="comment">--记录下更新之后的数据</span></span><br><span class="line">  <span class="keyword">insert</span> <span class="keyword">into</span> student_log <span class="keyword">values</span></span><br><span class="line">  (<span class="string">'update'</span>,<span class="string">'after'</span>,<span class="keyword">user</span>,<span class="keyword">sysdate</span>,:NEW.stuid,:NEW.name,:NEW.sex);</span><br><span class="line">  </span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>作业：</p><p>创建一个用户信息表userinfo，有如下几列 </p><ol><li><p>userid   username用户名  pwd密码  email邮箱 mobile手机号码</p></li><li><p>创建一个序列sq_userid用作userid的序列号生成器</p></li><li><p>创建before触发器tg_userid,用来自动插入userid的序列号</p></li><li><p>用insert 语句插入5条测试记录,insert语句不需要指明userid的值，</p><p>由第3部创建的tg_userid触发器自动生成。</p></li><li><p>创建一个userinfo_bak备份表，表结构和userinfo完全一样</p></li><li><p>创建一个after触发器，能够自动将userinfo表中删除的记录备份到</p><p>userinfo_bak表中</p></li><li><p>创建一个userinfo_log日志表，其表结构</p><p>event 操作名  beforeafter时间标志, log_user操作的用户名,</p><p>log_time操作时间,其它列与userinfo表一致</p></li></ol><p>​        这张表用于存储对userinfo所做操作的日志记录。</p><ol start="8"><li><p>创建一个after触发器，当用update语句修改userinfo表中记录时，</p></li><li><p>能够在userinfo_log日志表中插入2条日志记录，第一条日志记录内容为</p><p>执行操作的类型以及执行操作的用户名和时间还有记录修改之前的值。</p><p>第二条日志记录内容为记录修改之后的值。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第四章-插入更新和删除表数据&quot;&gt;&lt;a href=&quot;#第四章-插入更新和删除表数据&quot; class=&quot;headerlink&quot; title=&quot;第四章 插入更新和删除表数据&quot;&gt;&lt;/a&gt;第四章 插入更新和删除表数据&lt;/h1&gt;&lt;h2 id=&quot;1-INSERT语句（DML数据操
      
    
    </summary>
    
    
    
      <category term="Oracle" scheme="https://zhuyu7876.github.io/tags/Oracle/"/>
    
      <category term="数据库" scheme="https://zhuyu7876.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>阿里云RDS数据库热备份的恢复</title>
    <link href="https://zhuyu7876.github.io/2019/12/19/%E9%98%BF%E9%87%8C%E4%BA%91RDS%E6%95%B0%E6%8D%AE%E5%BA%93%E7%83%AD%E5%A4%87%E4%BB%BD%E7%9A%84%E6%81%A2%E5%A4%8D/"/>
    <id>https://zhuyu7876.github.io/2019/12/19/%E9%98%BF%E9%87%8C%E4%BA%91RDS%E6%95%B0%E6%8D%AE%E5%BA%93%E7%83%AD%E5%A4%87%E4%BB%BD%E7%9A%84%E6%81%A2%E5%A4%8D/</id>
    <published>2019-12-19T02:03:45.000Z</published>
    <updated>2019-12-19T02:06:08.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里云RDS数据库热备份的恢复"><a href="#阿里云RDS数据库热备份的恢复" class="headerlink" title="阿里云RDS数据库热备份的恢复"></a>阿里云RDS数据库热备份的恢复</h1><h2 id="一-xtrabackup数据库热备份软件介绍"><a href="#一-xtrabackup数据库热备份软件介绍" class="headerlink" title="一.xtrabackup数据库热备份软件介绍"></a>一.xtrabackup数据库热备份软件介绍</h2><p>阿里云的RDS数据库热备份是采用的xtrabackup备份软件完成的备份。</p><p>xtrabackup是开源的mysql热备份软件。其最新版本是8.0版。</p><p>一般来说xtrabackup最常用的是2.3和2.4两个版本。做热备份时，xtrabackup2.3针对的是mysql5.6版，xtrabackup2.4针对的是mysql5.7版。</p><p>注意:xtrabackup只能在linux环境下运行。</p><p>当我们要恢复数据库时，一定要搞清楚恢复的数据库版本，并安装对应的xtrabackup版本。</p><h2 id="二-恢复步骤"><a href="#二-恢复步骤" class="headerlink" title="二 恢复步骤"></a>二 恢复步骤</h2><h3 id="1-安装centos7虚拟机"><a href="#1-安装centos7虚拟机" class="headerlink" title="1. 安装centos7虚拟机"></a>1. 安装centos7虚拟机</h3><h3 id="2-安装mysql"><a href="#2-安装mysql" class="headerlink" title="2. 安装mysql"></a>2. 安装mysql</h3><p>也可以先安装宝塔面板，再用宝塔面板安装mysql</p><p>在centos7下用如下命令安装宝塔面板</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><h3 id="3-解压备份文件"><a href="#3-解压备份文件" class="headerlink" title="3. 解压备份文件"></a>3. 解压备份文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mkdir  data</span><br><span class="line"># tar -zxvf hins6415789_data_20190927031508.tar.gz   -C data</span><br></pre></td></tr></table></figure><p>解压完成后，可以看到整个文件夹其实就是mysql下的data数据文件夹，但是这个文件不能直接放到mysql目录下使用，必须要用xtrabackup恢复才行。</p><p>可以看到其中有一个名为xtrabackup_info的文件，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">uuid &#x3D; 844f122a-e092-11e9-aedc-7cd30ac4e8f2</span><br><span class="line">name &#x3D; </span><br><span class="line">tool_name &#x3D; innobackupex</span><br><span class="line">tool_command &#x3D; --defaults-file&#x3D;&#x2F;etc&#x2F;my3026.cnf --password&#x3D;... --user&#x3D;root --host&#x3D;127.0.0.1 --port&#x3D;3026 --tmpdir&#x3D;&#x2F;home&#x2F;mysql&#x2F;backup&#x2F;3026 --rocksdb_checkpoint_path&#x3D;&#x2F;mysqldata&#x2F;backup_tmp&#x2F;4077803_2330912 --rds-xb-fd-limits&#x3D;400000 --slave-info --stream&#x3D;tar &#x2F;home&#x2F;mysql&#x2F;backup&#x2F;3026</span><br><span class="line">tool_version &#x3D; 2.3.10</span><br><span class="line">ibbackup_version &#x3D; 2.3.10</span><br><span class="line">server_version &#x3D; 5.6.16-log</span><br><span class="line">start_time &#x3D; 2019-09-27 03:15:53</span><br><span class="line">end_time &#x3D; 2019-09-27 03:19:10</span><br><span class="line">lock_time &#x3D; 4</span><br><span class="line">binlog_pos &#x3D; filename &#39;mysql-bin.001094&#39;, position 28375, GTID of the last change &#39;6df9fe78-53f1-11e7-bb91-7cd30ac4e6a6:1-17525642&#39;</span><br><span class="line">innodb_from_lsn &#x3D; 0</span><br><span class="line">innodb_to_lsn &#x3D; 25986875480</span><br><span class="line">partial &#x3D; N</span><br><span class="line">incremental &#x3D; N</span><br><span class="line">format &#x3D; tar</span><br><span class="line">compact &#x3D; N</span><br><span class="line">compressed &#x3D; N</span><br><span class="line">encrypted &#x3D; N</span><br></pre></td></tr></table></figure><h4 id="tar-命令详解"><a href="#tar-命令详解" class="headerlink" title="tar 命令详解"></a>tar 命令详解</h4><p>tar在Linux上是常用的打包、压缩、加压缩工具，他的参数很多，折里仅仅列举常用的压缩与解压缩参数</p><p>参数：<br>-c ：create 建立压缩档案的参数；<br>-x ： 解压缩压缩档案的参数；<br>-z ： 是否需要用gzip压缩；<br>-v： 压缩的过程中显示档案；<br>-f： 置顶文档名，在f后面立即接文件名，不能再加参数</p><p>举例： 一，将整个/home/www/images 目录下的文件全部打包为 /home/www/images.tar</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf &#x2F;home&#x2F;www&#x2F;images.tar &#x2F;home&#x2F;www&#x2F;images ← 仅打包，不压缩</span><br><span class="line">tar -zcvf &#x2F;home&#x2F;www&#x2F;images.tar.gz &#x2F;home&#x2F;www&#x2F;images ← 打包后，以gzip压缩</span><br></pre></td></tr></table></figure><p>在参数f后面的压缩文件名是自己取的，习惯上用tar来做，如果加z参数，则以tar.gz 或tgz来代表gzip压缩过的tar file文件</p><p>1 将tgz文件解压到指定目录<br>tar zxvf test.tgz -C 指定目录<br>比如将/source/kernel.tgz解压到 /source/linux-2.6.29 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf &#x2F;source&#x2F;kernel.tgz -C &#x2F;source&#x2F; linux-2.6.29</span><br></pre></td></tr></table></figure><p>2 将指定目录压缩到指定文件<br>比如将linux-2.6.29 目录压缩到 kernel.tgz</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar czvf kernel.tgz linux-2.6.29</span><br></pre></td></tr></table></figure><h3 id="4-安装xtrabackup"><a href="#4-安装xtrabackup" class="headerlink" title="4.安装xtrabackup"></a>4.安装xtrabackup</h3><p>这里我们安装的是xtrabackup2.3版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install http:&#x2F;&#x2F;www.percona.com&#x2F;downloads&#x2F;percona-release&#x2F;redhat&#x2F;0.1-4&#x2F;percona-release-0.1-4.noarch.rp</span><br><span class="line"></span><br><span class="line">yum list | grep percona</span><br><span class="line"></span><br><span class="line">yum install percona-xtrabac</span><br></pre></td></tr></table></figure><h3 id="5-恢复数据库"><a href="#5-恢复数据库" class="headerlink" title="5.恢复数据库"></a>5.恢复数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># service mysqld stop   &#x2F;&#x2F;先停掉mysql服务</span><br><span class="line"># mv &#x2F;www&#x2F;server&#x2F;data &#x2F;www&#x2F;server&#x2F;databack &#x2F;&#x2F;将mysql数据库原有的data目录改名字做备份</span><br><span class="line">&#x2F;&#x2F;恢复数据库</span><br><span class="line"># xtrabackup --copy-back --target-dir&#x3D;&#x2F;home&#x2F;data</span><br><span class="line"># chown -R mysql:mysql data &#x2F;&#x2F;给data目录赋权</span><br></pre></td></tr></table></figure><h2 id="三-修改mysql5-6的root密码"><a href="#三-修改mysql5-6的root密码" class="headerlink" title="三 修改mysql5.6的root密码"></a>三 修改mysql5.6的root密码</h2><h4 id="1-绕过密码启动"><a href="#1-绕过密码启动" class="headerlink" title="1.绕过密码启动"></a>1.绕过密码启动</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf   <span class="comment">//打开mysql的配置文件</span></span><br><span class="line"><span class="comment">//在其中[mysqld]节点下加入下面一句话</span></span><br><span class="line">   skip-grant-tables=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>vim使用时在锁定状态下 输入i 进入编辑状态</p><p>在编辑状态按esc键进入命令状态</p><p>在命令状态输入 :q 是不保存修改就推出</p><p>输入:wq! 是保存修改并退出。</p><p>修改完毕后重启mysql服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start</span><br><span class="line">mysql -u root -p    <span class="comment">//进入mysql命令行</span></span><br></pre></td></tr></table></figure><h4 id="2-修改root密码"><a href="#2-修改root密码" class="headerlink" title="2. 修改root密码"></a>2. 修改root密码</h4><p>在mysql命令行下输入如下语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql; ##使用mysql数据库</span><br><span class="line">mysql&gt; update user set password&#x3D;password(&quot;123456&quot;) where      user&#x3D;&quot;root&quot;;##更新密码</span><br><span class="line">mysql&gt; flush privileges;##刷新权限</span><br></pre></td></tr></table></figure><p>然后将my.cnf文件中添加的那句 skip-grant-tables=1注释掉。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart &#x2F;&#x2F;重启mysql服务</span><br></pre></td></tr></table></figure><h4 id="3-添加root的远程访问权限"><a href="#3-添加root的远程访问权限" class="headerlink" title="3.添加root的远程访问权限"></a>3.添加root的远程访问权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;  </span><br><span class="line">flush privileges; &#x2F;&#x2F;刷新权限</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;阿里云RDS数据库热备份的恢复&quot;&gt;&lt;a href=&quot;#阿里云RDS数据库热备份的恢复&quot; class=&quot;headerlink&quot; title=&quot;阿里云RDS数据库热备份的恢复&quot;&gt;&lt;/a&gt;阿里云RDS数据库热备份的恢复&lt;/h1&gt;&lt;h2 id=&quot;一-xtrabackup数
      
    
    </summary>
    
    
    
      <category term="数据库" scheme="https://zhuyu7876.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="阿里云" scheme="https://zhuyu7876.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhuyu7876.github.io/2019/12/19/hello-world/"/>
    <id>https://zhuyu7876.github.io/2019/12/19/hello-world/</id>
    <published>2019-12-19T01:17:28.109Z</published>
    <updated>2019-12-19T02:04:20.365Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
      <category term="test" scheme="https://zhuyu7876.github.io/tags/test/"/>
    
  </entry>
  
</feed>
